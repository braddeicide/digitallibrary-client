/*
 * Interface.java
 *
 * Created on May 18, 2005, 8:46 PM
 */

package digitallibrary;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.security.MessageDigest;
import java.nio.channels.FileChannel;
import java.io.*;
import java.net.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import com.adobe.acrobat.PDFDocument;
import java.util.ArrayList;
import javax.swing.table.*;
//import java.nio.file.Path;

import digitallibrary.generated.Tables.*;
import org.jooq.impl.DSL.*;
import org.jooq.DSLContext;
import org.jooq.SQLDialect;
import org.jooq.*;
import org.jooq.impl.DSL;

/**
 *
 * @author  brad
 */
public class Interface extends javax.swing.JFrame{
        static sql localSql = new sql();
        String filename = "";
        String[] fileArray;
        String[] fileArray2;
        String[][] classificationArray;
        JTable resultTable = new JTable(0,8);
        JTable resultTable2 = new JTable(0,9);
        int lastSelected = 0;
        
        // Note, should select all groups here, then use that for the three 
        // group comboboxes
        
    /** Creates new form Interface */
    public Interface() {
        initComponents();
        // We add this here so we can access its contents later
        this.setVisible(true);
        // Unable to test for SQL connection without NullPointer so we'll
        // make sure we always have it
        StartupStuff();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        classify = new javax.swing.JPanel();
        ClassificationFilename = new javax.swing.JTextField();
        ClassificationAuthor = new javax.swing.JTextField();
        ClassificationRelatedAuthors = new javax.swing.JTextField();
        ClassificationTitle = new javax.swing.JTextField();
        ClassificationPublicationDate = new javax.swing.JComboBox();
        ClassificationResearchGroup = new javax.swing.JComboBox();
        ClassificationKeywords = new javax.swing.JTextField();
        ClassificationClassification = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        rightClick = new javax.swing.JPopupMenu();
        open = new javax.swing.JMenuItem();
        modify = new javax.swing.JMenuItem();
        delete = new javax.swing.JMenuItem();
        reclassify = new javax.swing.JPanel();
        ClassificationFilename1 = new javax.swing.JTextField();
        ClassificationAuthor1 = new javax.swing.JTextField();
        ClassificationRelatedAuthors1 = new javax.swing.JTextField();
        ClassificationTitle1 = new javax.swing.JTextField();
        ClassificationPublicationDate1 = new javax.swing.JComboBox();
        ClassificationResearchGroup1 = new javax.swing.JComboBox();
        ClassificationKeywords1 = new javax.swing.JTextField();
        ClassificationClassification1 = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        imagePanel3 = new ImagePanel(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/digitallibrary/images/title_background.gif")));
        jLabel59 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        Title_middle = new javax.swing.JLabel();
        imagePanel1 = new ImagePanel(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/digitallibrary/images/title_background.gif")));
        TabbedPanePadder = new javax.swing.JPanel();
        TopPadding = new javax.swing.JPanel();
        LeftPadding = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Login = new javax.swing.JPanel();
        jPanel_PadTop = new javax.swing.JPanel();
        jPanel_PadBottom = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel_PadEast = new javax.swing.JPanel();
        jPanel_PadWest = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel62 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        View = new javax.swing.JPanel();
        jPanel_PadTop2 = new javax.swing.JPanel();
        jPanel_PadTop1_pad4 = new javax.swing.JPanel();
        jPanel_PadTop1_pad5 = new javax.swing.JPanel();
        jPanel_PadTop1_pad6 = new javax.swing.JPanel();
        jPanel_PadTop1_pad7 = new javax.swing.JPanel();
        jPanel_PadBottom2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel_PadEast2 = new javax.swing.JPanel();
        jPanel_PadWest2 = new javax.swing.JPanel();
        jPanel_view = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel17 = new javax.swing.JLabel();
        authorContains = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        authorStarts = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        authorEnds = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        relatedContains = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        relatedStarts = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        relatedEnds = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel23 = new javax.swing.JLabel();
        titleContains = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        titleStarts = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        titleEnds = new javax.swing.JTextField();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jLabel30 = new javax.swing.JLabel();
        groupStarts = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        groupEnds = new javax.swing.JTextField();
        jCheckBox6 = new javax.swing.JCheckBox();
        jLabel32 = new javax.swing.JLabel();
        keywordsContains = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        keywordsNot = new javax.swing.JTextField();
        jCheckBox7 = new javax.swing.JCheckBox();
        classification = new javax.swing.JComboBox();
        group = new javax.swing.JComboBox();
        dateStarts = new javax.swing.JComboBox();
        dateEnds = new javax.swing.JComboBox();
        runSearch = new javax.swing.JButton();
        Upload = new javax.swing.JPanel();
        jPanel_PadTop1 = new javax.swing.JPanel();
        jPanel_PadTop1_pad = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel_PadTop1_pad1 = new javax.swing.JPanel();
        jPanel_PadTop1_pad2 = new javax.swing.JPanel();
        jPanel_PadTop1_pad3 = new javax.swing.JPanel();
        jPanel_PadBottom1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel_PadEast1 = new javax.swing.JPanel();
        jPanel_PadWest1 = new javax.swing.JPanel();
        jPanel_upload = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jButton_upload_browse = new javax.swing.JButton();
        jButton_upload_store = new javax.swing.JButton();
        Statistics = new javax.swing.JPanel();
        jPanel_PadTop4 = new javax.swing.JPanel();
        jPanel_PadBottom4 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jPanel_PadEast4 = new javax.swing.JPanel();
        jPanel_PadWest4 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel55 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        Admin = new javax.swing.JPanel();
        jPanel_PadTop3 = new javax.swing.JPanel();
        jPanel_PadTop1_pad8 = new javax.swing.JPanel();
        jPanel_PadTop1_pad9 = new javax.swing.JPanel();
        jPanel_PadTop1_pad10 = new javax.swing.JPanel();
        jPanel_PadTop1_pad11 = new javax.swing.JPanel();
        jPanel_PadEast3 = new javax.swing.JPanel();
        jPanel_PadWest3 = new javax.swing.JPanel();
        jPanel_Admin = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JPasswordField();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel_PadTop5 = new javax.swing.JPanel();
        jPanel_PadBottom3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel_PadEast5 = new javax.swing.JPanel();
        jPanel_PadWest5 = new javax.swing.JPanel();
        syncmiddle = new javax.swing.JPanel();
        LoginBox2 = new javax.swing.JPanel();
        Server2 = new javax.swing.JLabel();
        ServerCombobox2 = new javax.swing.JComboBox();
        Username2 = new javax.swing.JLabel();
        UsernameCombobox2 = new javax.swing.JTextField();
        Password2 = new javax.swing.JLabel();
        PasswordComboBox2 = new javax.swing.JPasswordField();
        jLabel38 = new javax.swing.JLabel();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        LoginBox3 = new javax.swing.JPanel();
        Server3 = new javax.swing.JLabel();
        ServerCombobox3 = new javax.swing.JComboBox();
        Username3 = new javax.swing.JLabel();
        UsernameCombobox3 = new javax.swing.JTextField();
        Password3 = new javax.swing.JLabel();
        PasswordComboBox3 = new javax.swing.JPasswordField();
        jLabel58 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        classify.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        classify.add(ClassificationFilename, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 350, -1));
        classify.add(ClassificationAuthor, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 350, -1));
        classify.add(ClassificationRelatedAuthors, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 350, -1));
        classify.add(ClassificationTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 350, -1));

        ClassificationPublicationDate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1990", "1991", "1992", "1993", "1994", "1995", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010" }));
        classify.add(ClassificationPublicationDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 60, -1));

        ClassificationResearchGroup.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Group 1", "Group x" }));
        classify.add(ClassificationResearchGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, -1, -1));
        classify.add(ClassificationKeywords, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, 350, -1));

        ClassificationClassification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "General", "Thesis", "Journal", "Technical Report", "Book", "Book Chapter", "Documentation" }));
        classify.add(ClassificationClassification, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, -1, -1));

        jLabel4.setText("Original Filename");
        classify.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        jLabel6.setText("Author");
        classify.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        jLabel7.setText("Related Authors");
        classify.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jLabel8.setText("Title");
        classify.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        jLabel9.setText("Publication year");
        classify.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jLabel10.setText("Research Group");
        classify.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        jLabel11.setText("Keywords");
        classify.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, -1));

        jLabel12.setText("Classification");
        classify.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        jButton5.setText("Add file to library");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        classify.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 300, -1, -1));

        jLabel13.setText("1");
        classify.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 270, 10, -1));

        jLabel14.setText("of");
        classify.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 270, -1, -1));

        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        rightClick.add(open);

        modify.setText("Modify");
        modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyActionPerformed(evt);
            }
        });
        rightClick.add(modify);

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        rightClick.add(delete);

        reclassify.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        reclassify.add(ClassificationFilename1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 350, -1));
        reclassify.add(ClassificationAuthor1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 50, 350, -1));
        reclassify.add(ClassificationRelatedAuthors1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 350, -1));
        reclassify.add(ClassificationTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, 350, -1));

        ClassificationPublicationDate1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1990", "1991", "1992", "1993", "1994", "1995", "1995", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2006", "2008", "2009", "2010" }));
        reclassify.add(ClassificationPublicationDate1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 60, -1));

        ClassificationResearchGroup1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Group 1", "Group 2" }));
        reclassify.add(ClassificationResearchGroup1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, -1, -1));
        reclassify.add(ClassificationKeywords1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 200, 350, -1));

        ClassificationClassification1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "General", "Thesis", "Journal", "Technical Report", "Book", "Book Chapter", "Documentation" }));
        reclassify.add(ClassificationClassification1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, -1, -1));

        jLabel15.setText("Origional Filename");
        reclassify.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        jLabel16.setText("Author");
        reclassify.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, -1, -1));

        jLabel26.setText("Related Authors");
        reclassify.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, -1, -1));

        jLabel29.setText("Title");
        reclassify.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));

        jLabel34.setText("Publication year");
        reclassify.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jLabel35.setText("Research Group");
        reclassify.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, -1, -1));

        jLabel36.setText("Keywords");
        reclassify.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, -1, -1));

        jLabel37.setText("Classification");
        reclassify.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        jButton6.setText("Confirm update");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        reclassify.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 120, -1, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Digital Library");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setAlignmentX(0.0F);
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setDoubleBuffered(false);
        jPanel1.setLayout(new java.awt.BorderLayout());

        imagePanel3.setEnabled(false);
        imagePanel3.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                imagePanel3AncestorResized(evt);
            }
        });
        imagePanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel59.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel59.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/images/jculogo.png"))); // NOI18N
        jLabel59.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel59.setAlignmentY(0.0F);
        jLabel59.setFocusable(false);
        jLabel59.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel59.setIconTextGap(0);
        jLabel59.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        imagePanel3.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jPanel1.add(imagePanel3, java.awt.BorderLayout.WEST);

        jPanel2.setAlignmentX(0.0F);
        jPanel2.setMaximumSize(new java.awt.Dimension(638, 72));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        Title_middle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/images/title.gif"))); // NOI18N
        jPanel2.add(Title_middle);

        jPanel1.add(jPanel2, java.awt.BorderLayout.CENTER);

        imagePanel1.setEnabled(false);
        imagePanel1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                imagePanel1AncestorResized(evt);
            }
        });
        imagePanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(imagePanel1, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        TabbedPanePadder.setDoubleBuffered(false);
        TabbedPanePadder.setLayout(new java.awt.BorderLayout());

        TopPadding.setBackground(new java.awt.Color(102, 102, 102));
        TopPadding.setDoubleBuffered(false);
        TabbedPanePadder.add(TopPadding, java.awt.BorderLayout.NORTH);

        LeftPadding.setBackground(new java.awt.Color(102, 102, 102));
        LeftPadding.setDoubleBuffered(false);
        TabbedPanePadder.add(LeftPadding, java.awt.BorderLayout.WEST);

        jTabbedPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Login.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                LoginComponentShown(evt);
            }
        });
        Login.setLayout(new java.awt.BorderLayout());

        jPanel_PadTop.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadTopAncestorResized(evt);
            }
        });
        jPanel_PadTop.setLayout(new java.awt.BorderLayout());
        Login.add(jPanel_PadTop, java.awt.BorderLayout.NORTH);

        jPanel_PadBottom.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadBottomAncestorResized(evt);
            }
        });
        jPanel_PadBottom.setLayout(new java.awt.BorderLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/images/books2.gif"))); // NOI18N
        jPanel_PadBottom.add(jLabel1, java.awt.BorderLayout.CENTER);

        Login.add(jPanel_PadBottom, java.awt.BorderLayout.SOUTH);

        jPanel_PadEast.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadEastAncestorResized(evt);
            }
        });
        jPanel_PadEast.setLayout(null);
        Login.add(jPanel_PadEast, java.awt.BorderLayout.EAST);

        jPanel_PadWest.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadWestAncestorResized(evt);
            }
        });
        jPanel_PadWest.setLayout(null);
        Login.add(jPanel_PadWest, java.awt.BorderLayout.WEST);

        jPanel3.setLayout(new java.awt.GridLayout(3, 3));
        jPanel3.add(jLabel62);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Welcome to Digital Library");
        jPanel3.add(jLabel5);
        jPanel3.add(jLabel63);

        Login.add(jPanel3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Welcome", new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/icons/login.gif")), Login); // NOI18N

        View.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        View.setPreferredSize(new java.awt.Dimension(700, 540));
        View.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                ViewComponentShown(evt);
            }
        });
        View.setLayout(new java.awt.BorderLayout());

        jPanel_PadTop2.setDoubleBuffered(false);
        jPanel_PadTop2.setLayout(new java.awt.GridLayout(1, 4));
        jPanel_PadTop2.add(jPanel_PadTop1_pad4);
        jPanel_PadTop2.add(jPanel_PadTop1_pad5);
        jPanel_PadTop2.add(jPanel_PadTop1_pad6);
        jPanel_PadTop2.add(jPanel_PadTop1_pad7);

        View.add(jPanel_PadTop2, java.awt.BorderLayout.NORTH);

        jPanel_PadBottom2.setBackground(new java.awt.Color(51, 51, 255));
        jPanel_PadBottom2.setDoubleBuffered(false);
        jPanel_PadBottom2.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadBottom2AncestorResized(evt);
            }
        });
        jPanel_PadBottom2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(null);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel_PadBottom2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        View.add(jPanel_PadBottom2, java.awt.BorderLayout.SOUTH);

        jPanel_PadEast2.setDoubleBuffered(false);
        jPanel_PadEast2.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadEast2AncestorResized(evt);
            }
        });
        jPanel_PadEast2.setLayout(null);
        View.add(jPanel_PadEast2, java.awt.BorderLayout.EAST);

        jPanel_PadWest2.setDoubleBuffered(false);
        jPanel_PadWest2.setPreferredSize(new java.awt.Dimension(36, 0));
        jPanel_PadWest2.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadWest2AncestorResized(evt);
            }
        });
        jPanel_PadWest2.setLayout(null);
        View.add(jPanel_PadWest2, java.awt.BorderLayout.WEST);

        jPanel_view.setPreferredSize(new java.awt.Dimension(500, 600));
        jPanel_view.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jCheckBox1.setText("Author");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });
        jPanel_view.add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel17.setText("Contains");
        jLabel17.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 20, -1, 20));

        authorContains.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                authorContainsKeyTyped(evt);
            }
        });
        jPanel_view.add(authorContains, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 180, -1));

        jLabel18.setText("Starts with");
        jLabel18.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, -1, 20));

        authorStarts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                authorStartsKeyTyped(evt);
            }
        });
        jPanel_view.add(authorStarts, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, 180, 20));

        jLabel19.setText("Ends with");
        jLabel19.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 20, -1, 20));

        authorEnds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                authorEndsKeyTyped(evt);
            }
        });
        jPanel_view.add(authorEnds, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 20, 180, -1));

        jCheckBox2.setText("Related Author");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseClicked(evt);
            }
        });
        jPanel_view.add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel20.setText("Contains");
        jLabel20.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, -1, 20));

        relatedContains.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                relatedContainsKeyTyped(evt);
            }
        });
        jPanel_view.add(relatedContains, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 180, -1));

        jLabel21.setText("Starts with");
        jLabel21.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 50, -1, 20));

        relatedStarts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                relatedStartsKeyTyped(evt);
            }
        });
        jPanel_view.add(relatedStarts, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 50, 180, 20));

        jLabel22.setText("Ends with");
        jLabel22.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 50, -1, 20));

        relatedEnds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                relatedEndsKeyTyped(evt);
            }
        });
        jPanel_view.add(relatedEnds, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 50, 180, -1));

        jCheckBox3.setText("Title");
        jCheckBox3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox3MouseClicked(evt);
            }
        });
        jPanel_view.add(jCheckBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel23.setText("Contains");
        jLabel23.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, -1, 20));

        titleContains.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                titleContainsKeyTyped(evt);
            }
        });
        jPanel_view.add(titleContains, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 180, -1));

        jLabel24.setText("Starts with");
        jLabel24.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 80, -1, 20));

        titleStarts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                titleStartsKeyTyped(evt);
            }
        });
        jPanel_view.add(titleStarts, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, 180, 20));

        jLabel25.setText("Ends with");
        jLabel25.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 80, -1, 20));

        titleEnds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                titleEndsKeyTyped(evt);
            }
        });
        jPanel_view.add(titleEnds, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 80, 180, -1));

        jCheckBox4.setText("Publication year");
        jCheckBox4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox4MouseClicked(evt);
            }
        });
        jPanel_view.add(jCheckBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        jLabel27.setText("Starting");
        jLabel27.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, -1, 20));

        jLabel28.setText("Ending");
        jLabel28.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, -1, 20));

        jCheckBox5.setText("Group");
        jCheckBox5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox5MouseClicked(evt);
            }
        });
        jPanel_view.add(jCheckBox5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        jLabel30.setText("Starts with");
        jLabel30.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, -1, 20));

        groupStarts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                groupStartsKeyTyped(evt);
            }
        });
        jPanel_view.add(groupStarts, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 180, 20));

        jLabel31.setText("Ends with");
        jLabel31.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 140, -1, 20));

        groupEnds.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                groupEndsKeyTyped(evt);
            }
        });
        jPanel_view.add(groupEnds, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 140, 180, -1));

        jCheckBox6.setText("Keywords");
        jCheckBox6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox6MouseClicked(evt);
            }
        });
        jPanel_view.add(jCheckBox6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        jLabel32.setText("Contains");
        jLabel32.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, -1, 20));

        keywordsContains.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                keywordsContainsKeyTyped(evt);
            }
        });
        jPanel_view.add(keywordsContains, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 180, -1));

        jLabel33.setText("Not contain");
        jLabel33.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jPanel_view.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, -1, 20));

        keywordsNot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                keywordsNotKeyTyped(evt);
            }
        });
        jPanel_view.add(keywordsNot, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 170, 180, 20));

        jCheckBox7.setText("Classification");
        jCheckBox7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox7MouseClicked(evt);
            }
        });
        jPanel_view.add(jCheckBox7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        classification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "General", "Thesis" }));
        classification.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                classificationPopupMenuWillBecomeVisible(evt);
            }
        });
        jPanel_view.add(classification, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 180, -1));

        group.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                groupPopupMenuWillBecomeVisible(evt);
            }
        });
        jPanel_view.add(group, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 180, -1));

        dateStarts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "any", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007" }));
        dateStarts.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                dateStartsPopupMenuWillBecomeVisible(evt);
            }
        });
        jPanel_view.add(dateStarts, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, 180, -1));

        dateEnds.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "any", "1980", "1981", "1982", "1983", "1984", "1985", "1986", "1987", "1988", "1989", "1990", "1991", "1992", "1993", "1994", "1995", "1996", "1997", "1998", "1999", "2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007" }));
        dateEnds.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                dateEndsPopupMenuWillBecomeVisible(evt);
            }
        });
        jPanel_view.add(dateEnds, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 110, 180, -1));

        runSearch.setText("Search");
        runSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runSearchActionPerformed(evt);
            }
        });
        jPanel_view.add(runSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 260, 160, -1));

        View.add(jPanel_view, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("View", new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/icons/search.gif")), View); // NOI18N

        Upload.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                UploadComponentShown(evt);
            }
        });
        Upload.setLayout(new java.awt.BorderLayout());

        jPanel_PadTop1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadTop1AncestorResized(evt);
            }
        });
        jPanel_PadTop1.setLayout(new java.awt.GridLayout(1, 4));
        jPanel_PadTop1.add(jPanel_PadTop1_pad);

        jLabel3.setText("Choose file to upload");
        jPanel_PadTop1.add(jLabel3);
        jPanel_PadTop1.add(jPanel_PadTop1_pad1);
        jPanel_PadTop1.add(jPanel_PadTop1_pad2);
        jPanel_PadTop1.add(jPanel_PadTop1_pad3);

        Upload.add(jPanel_PadTop1, java.awt.BorderLayout.NORTH);

        jPanel_PadBottom1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadBottom1AncestorResized(evt);
            }
        });
        jPanel_PadBottom1.setLayout(new java.awt.BorderLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/images/books2.gif"))); // NOI18N
        jPanel_PadBottom1.add(jLabel2, java.awt.BorderLayout.CENTER);

        Upload.add(jPanel_PadBottom1, java.awt.BorderLayout.SOUTH);

        jPanel_PadEast1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadEast1AncestorResized(evt);
            }
        });
        jPanel_PadEast1.setLayout(null);
        Upload.add(jPanel_PadEast1, java.awt.BorderLayout.EAST);

        jPanel_PadWest1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel_PadWest1AncestorResized(evt);
            }
        });
        jPanel_PadWest1.setLayout(null);
        Upload.add(jPanel_PadWest1, java.awt.BorderLayout.WEST);

        jTextField1.setPreferredSize(new java.awt.Dimension(557, 25));
        jTextField1.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jTextField1AncestorResized(evt);
            }
        });
        jPanel_upload.add(jTextField1);

        jButton_upload_browse.setText("Browse");
        jButton_upload_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_upload_browseActionPerformed(evt);
            }
        });
        jPanel_upload.add(jButton_upload_browse);

        jButton_upload_store.setText("Store");
        jButton_upload_store.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_upload_storeActionPerformed(evt);
            }
        });
        jPanel_upload.add(jButton_upload_store);

        Upload.add(jPanel_upload, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Upload", new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/icons/upload.gif")), Upload); // NOI18N

        Statistics.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                StatisticsComponentShown(evt);
            }
        });
        Statistics.setLayout(new java.awt.BorderLayout());

        jPanel_PadTop4.setLayout(new java.awt.BorderLayout());
        Statistics.add(jPanel_PadTop4, java.awt.BorderLayout.NORTH);

        jPanel_PadBottom4.setLayout(new java.awt.BorderLayout());

        jLabel44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/images/books2.gif"))); // NOI18N
        jLabel44.setFocusable(false);
        jLabel44.setMinimumSize(new java.awt.Dimension(213, 1));
        jPanel_PadBottom4.add(jLabel44, java.awt.BorderLayout.CENTER);

        Statistics.add(jPanel_PadBottom4, java.awt.BorderLayout.SOUTH);

        jPanel_PadEast4.setLayout(null);
        Statistics.add(jPanel_PadEast4, java.awt.BorderLayout.EAST);

        jPanel_PadWest4.setLayout(null);
        Statistics.add(jPanel_PadWest4, java.awt.BorderLayout.WEST);

        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel40.setText("Total documents");
        jPanel8.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, -1, -1));

        jLabel45.setText("Total groups");
        jPanel8.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, -1, -1));

        jLabel46.setText("Most popular author");
        jPanel8.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, -1, -1));

        jLabel47.setText("Most active study group");
        jPanel8.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, -1, -1));

        jLabel48.setText("Last 5 uploads");
        jPanel8.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, -1, -1));
        jPanel8.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, -1, -1));
        jPanel8.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, -1, -1));
        jPanel8.add(jLabel51, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, -1, -1));
        jPanel8.add(jLabel52, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, -1, -1));
        jPanel8.add(jLabel53, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, -1, -1));
        jPanel8.add(jLabel54, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, -1, -1));
        jPanel8.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, -1, -1));
        jPanel8.add(jLabel56, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, -1, -1));
        jPanel8.add(jLabel57, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 250, -1, -1));

        Statistics.add(jPanel8, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Statistics", new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/icons/stats.gif")), Statistics, ""); // NOI18N

        Admin.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                AdminComponentShown(evt);
            }
        });
        Admin.setLayout(new java.awt.BorderLayout());

        jPanel_PadTop3.setDoubleBuffered(false);
        jPanel_PadTop3.setLayout(new java.awt.GridLayout(1, 4));
        jPanel_PadTop3.add(jPanel_PadTop1_pad8);
        jPanel_PadTop3.add(jPanel_PadTop1_pad9);
        jPanel_PadTop3.add(jPanel_PadTop1_pad10);
        jPanel_PadTop3.add(jPanel_PadTop1_pad11);

        Admin.add(jPanel_PadTop3, java.awt.BorderLayout.NORTH);

        jPanel_PadEast3.setDoubleBuffered(false);
        jPanel_PadEast3.setLayout(null);
        Admin.add(jPanel_PadEast3, java.awt.BorderLayout.EAST);

        jPanel_PadWest3.setDoubleBuffered(false);
        jPanel_PadWest3.setLayout(null);
        Admin.add(jPanel_PadWest3, java.awt.BorderLayout.WEST);

        jPanel_Admin.setPreferredSize(new java.awt.Dimension(500, 600));
        jPanel_Admin.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));

        jScrollPane4.setAlignmentX(0.0F);
        jScrollPane4.setAlignmentY(0.0F);
        jScrollPane4.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jScrollPane4AncestorResized(evt);
            }
        });

        jPanel4.setPreferredSize(new java.awt.Dimension(670, 530));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Groups"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane3.setViewportView(jList1);

        jPanel5.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 160, 170));

        jButton7.setText("Add new group");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, 160, -1));

        jButton8.setText("Delete selected group");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 80, 160, -1));

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 660, 240));

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Local database"));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel39.setText("Local document storage directory:");
        jPanel6.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jButton11.setText("Browse");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 70, 90, -1));
        jPanel6.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 70, 460, 30));
        jPanel6.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 160, -1));
        jPanel6.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, 160, -1));

        jLabel41.setText("Username");
        jPanel6.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, -1, -1));

        jLabel42.setText("Password");
        jPanel6.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, -1, -1));

        jLabel43.setText("Local database login:");
        jPanel6.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, -1, -1));

        jButton9.setFont(new java.awt.Font("MS Sans Serif", 1, 11)); // NOI18N
        jButton9.setText("Save");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 220, 120, 40));

        jPanel4.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 660, 270));

        jScrollPane4.setViewportView(jPanel4);

        jPanel_Admin.add(jScrollPane4);

        Admin.add(jPanel_Admin, java.awt.BorderLayout.CENTER);

        jTabbedPane2.addTab("Config", new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/icons/administration.gif")), Admin); // NOI18N

        jPanel7.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                jPanel7AncestorResized(evt);
            }
        });
        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel_PadTop5.setLayout(new java.awt.BorderLayout());
        jPanel7.add(jPanel_PadTop5, java.awt.BorderLayout.NORTH);

        jPanel_PadBottom3.setPreferredSize(new java.awt.Dimension(0, 400));
        jPanel_PadBottom3.setLayout(new java.awt.BorderLayout());
        jPanel_PadBottom3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel7.add(jPanel_PadBottom3, java.awt.BorderLayout.SOUTH);

        jPanel_PadEast5.setLayout(null);
        jPanel7.add(jPanel_PadEast5, java.awt.BorderLayout.EAST);

        jPanel_PadWest5.setLayout(null);
        jPanel7.add(jPanel_PadWest5, java.awt.BorderLayout.WEST);

        syncmiddle.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LoginBox2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        LoginBox2.setDoubleBuffered(false);
        LoginBox2.setMinimumSize(new java.awt.Dimension(300, 73));
        LoginBox2.setPreferredSize(new java.awt.Dimension(100, 100));
        LoginBox2.setLayout(new java.awt.GridLayout(3, 2));

        Server2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Server2.setText("Mysql Server");
        LoginBox2.add(Server2);

        ServerCombobox2.setEditable(true);
        ServerCombobox2.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        ServerCombobox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dunk.cs.jcu.edu.au", "192.168.122.22", "localhost" }));
        LoginBox2.add(ServerCombobox2);

        Username2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Username2.setText("Username");
        LoginBox2.add(Username2);

        UsernameCombobox2.setText("dladmin");
        LoginBox2.add(UsernameCombobox2);

        Password2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Password2.setText("Password");
        LoginBox2.add(Password2);

        PasswordComboBox2.setText("BradDL3047");
        PasswordComboBox2.setPreferredSize(new java.awt.Dimension(300, 300));
        LoginBox2.add(PasswordComboBox2);

        syncmiddle.add(LoginBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 54, 420, 100));

        jLabel38.setText("Remote database");
        syncmiddle.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        jButton15.setText("Upload documents");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        syncmiddle.add(jButton15, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 170, 170, -1));

        jButton16.setText("Download documents");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        syncmiddle.add(jButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 200, 170, -1));

        LoginBox3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        LoginBox3.setDoubleBuffered(false);
        LoginBox3.setMinimumSize(new java.awt.Dimension(300, 73));
        LoginBox3.setPreferredSize(new java.awt.Dimension(100, 100));
        LoginBox3.setLayout(new java.awt.GridLayout(3, 2));

        Server3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Server3.setText("Website location on server");
        LoginBox3.add(Server3);

        ServerCombobox3.setEditable(true);
        ServerCombobox3.setFont(new java.awt.Font("SansSerif", 0, 11)); // NOI18N
        ServerCombobox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "/~jc118226/DL/", "/DigitalLibrary/" }));
        LoginBox3.add(ServerCombobox3);

        Username3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Username3.setText("Username");
        LoginBox3.add(Username3);

        UsernameCombobox3.setText("jc118226");
        LoginBox3.add(UsernameCombobox3);

        Password3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Password3.setText("Password");
        LoginBox3.add(Password3);

        PasswordComboBox3.setText("PineIsGa");
        PasswordComboBox3.setPreferredSize(new java.awt.Dimension(300, 300));
        LoginBox3.add(PasswordComboBox3);

        syncmiddle.add(LoginBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 54, 420, 100));

        jLabel58.setText("Remote website login");
        syncmiddle.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(526, 20, -1, -1));

        jPanel7.add(syncmiddle, java.awt.BorderLayout.CENTER);

        jTabbedPane2.addTab("Synchronise", new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/icons/upload.gif")), jPanel7); // NOI18N

        jTabbedPane1.addTab("Administration", new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/icons/administration.gif")), jTabbedPane2); // NOI18N

        TabbedPanePadder.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(TabbedPanePadder, java.awt.BorderLayout.CENTER);

        jMenu2.setText("File");

        jMenuItem2.setText("exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Edit");

        jMenuItem3.setText("Config");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        jMenuBar1.add(Box.createHorizontalGlue());
        jMenu1.setText("Help");
        jMenu1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jMenu1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jMenuItem4.setText("Contents");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem1.setText("About");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(1032, 782));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop.getDesktop().open(new File(System.getProperty("user.dir")+File.separator+"help.CHM"));
            } catch(Exception e){throw new popupException(e);} 
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jScrollPane4AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jScrollPane4AncestorResized
jPanel_Admin.removeAll();
jScrollPane4.setPreferredSize(new Dimension(jPanel_Admin.getWidth(),jPanel_Admin.getHeight()));
jScrollPane4.setSize(jPanel4.getPreferredSize());
jScrollPane4.setViewportView(jPanel4);
jPanel_Admin.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 190, 580));
    }//GEN-LAST:event_jScrollPane4AncestorResized

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        int[] rows = resultTable.getSelectedRows();
        for (int i=0; i<rows.length; i++) {
            TableModel tm = resultTable.getModel();

            if (Desktop.isDesktopSupported()) {
                try {
                    Desktop.getDesktop().open(new File(jTextField2.getText() + File.separator + tm.getValueAt(rows[i],7)));
                } catch(java.io.IOException e){throw new popupException(e);} 
            }            
        }
    }//GEN-LAST:event_openActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        jTabbedPane1.setSelectedIndex(4);
        jTabbedPane2.setSelectedIndex(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        new aboutDialog(this, true).show();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jPanel7AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel7AncestorResized
        jPanel_PadBottom3.setPreferredSize(new java.awt.Dimension(Login.getWidth(),(View.getHeight() - 270)));
        jPanel_PadBottom3.setSize(jPanel_PadBottom2.getPreferredSize());
        jPanel_PadEast5.setPreferredSize(new java.awt.Dimension((View.getWidth()-1000)/2,jPanel_PadEast5.getHeight()));
        jPanel_PadEast5.setSize(jPanel_PadEast5.getPreferredSize());
        jPanel_PadWest5.setPreferredSize(new java.awt.Dimension((View.getWidth()-1000)/2,jPanel_PadWest5.getHeight()));
        jPanel_PadWest5.setSize(jPanel_PadWest5.getPreferredSize());
        this.repaint();
    }//GEN-LAST:event_jPanel7AncestorResized

    private void StatisticsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_StatisticsComponentShown
        
        DSLContext create = DSL.using(localSql.getCon(), SQLDialect.MYSQL);
        create.selectCount().from("documents");
        String[] retrieve = create.select().from("documents").fetch().toString().split("");
 
        String sqlQuery = "select count(documentid) as c from documents";
        String[] answers  = localSql.query(sqlQuery, retrieve);
        jLabel49.setText(answers[0]);
        
        sqlQuery = "select count(groupname) as c from groups";
        answers  = localSql.query(sqlQuery, retrieve);
        jLabel50.setText(answers[0]);
        
        sqlQuery = "select author, count(author) as c from documents  where author !='' group by author limit 1";
        String[] retrieve1 = {"author"};
        answers  = localSql.query(sqlQuery, retrieve1);
        jLabel51.setText(answers[0]);
        
        sqlQuery = "select studygroup, count(studygroup) as c from documents group by studygroup limit 1";
        String[] retrieve2 = {"studygroup"};
        answers  = localSql.query(sqlQuery, retrieve2);
        jLabel52.setText(answers[0]);
        
        sqlQuery = "select title from documents order by documentid desc limit 5";
        ArrayList answers3 = new ArrayList();
        String[] retrieve3 = {"title"};
        answers3  = localSql.query2d(sqlQuery, retrieve3);
        int loop = 5;

        //If files don't have a title the statistics look broken,
        //so we'll replace empty ones with "No Title".
        //The code looked much nicer before this.
        
        try {
            String tmp = ((String [])answers3.get(0))[0];
            if (tmp.equals(""))
                tmp = new String("No Title");
            jLabel53.setText(tmp);

            tmp = new String(((String [])answers3.get(1))[0]);
            if (tmp.equals(""))
                tmp = new String("No Title");
            jLabel54.setText(tmp);        

            tmp = new String(((String [])answers3.get(2))[0]);
            if (tmp.equals(""))
                tmp = new String("No Title");
            jLabel55.setText(tmp);        

            tmp = new String(((String [])answers3.get(3))[0]);
            if (tmp.equals(""))
                tmp = new String("No Title");
            jLabel56.setText(tmp);        

            tmp = new String(((String [])answers3.get(4))[0]);        
            if (tmp.equals(""))
                tmp = new String("No Title");
            jLabel57.setText(tmp);        
        }catch(IndexOutOfBoundsException e){/*this is expected*/}
        
    }//GEN-LAST:event_StatisticsComponentShown

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // Log into remote database
        sql remoteSql;
        try {
            remoteSql = new sql(UsernameCombobox2.getText(),PasswordComboBox2.getText(),ServerCombobox2.getSelectedItem().toString(),"digitallibrary"); 
        }catch(com.mysql.jdbc.CommunicationsException e){
            throw new popupException("Please check connection to MySQL database");
        }catch(Exception f){
            throw new popupException(f);
        }
            
        final java.awt.event.ActionEvent innerEvent = evt;
            
        String sqlQuery = "select documentid, md5 from documents";
        String[] retrieve = {"documentid","md5"};

        // The code for syncing up and down is soo similar, i'll just swap here
        // and avoid lots of code.  Of course passing to a function would be better
        // but thats as easy in netbeans
        ArrayList remoteAnswers  = localSql.query2d(sqlQuery, retrieve);
        ArrayList localAnswers  = remoteSql.query2d(sqlQuery, retrieve);

        sqlQuery = "select * from documents where";
        int toSync = 0;
        boolean found = false;
        System.out.println("Local ansdwes size " + localAnswers.size());
        for (int i=0; i<localAnswers.size(); i++){
            for (int j=0; j<remoteAnswers.size(); j++) {
                System.out.println("if " + ((String[])localAnswers.get(i))[1] + " AND " + ((String[])remoteAnswers.get(j))[1]);
                if (((String[])localAnswers.get(i))[1].equals(((String[])remoteAnswers.get(j))[1])){
                    found = true;
                    System.out.println("Not syncing" + ((String[])localAnswers.get(i))[1]);
                }
            }
            if (!found) {
                System.out.println("Going to upload " + ((String[])localAnswers.get(i))[0]);
                if (toSync == 0) {
                    sqlQuery = sqlQuery.concat(" documentid='" + ((String[])localAnswers.get(i))[0] + "'");
                }else {
                    sqlQuery = sqlQuery.concat(" or documentid='" + ((String[])localAnswers.get(i))[0] + "'");    
                }
            toSync++;
            }
        found = false;
        }

        if (toSync > 0) {
            String[] retrieve2 = {"title","author","related_author","keywords","studygroup","classification","publicationdate","md5","filename","documentid"};
            final ArrayList answers2  = remoteSql.query2d(sqlQuery, retrieve2);
            String[] tmp = new String[answers2.size()];

            final Object[] tableNames = {"Title","Author","Related Author","Keywords","Group","Classification","Date"};

            String tmpline = new String();
            tmp = (String[])answers2.get(0);
            final Object[][] tmpAoA2 = new String[answers2.size()+1][tmp.length];
        
                    for (int i=0; i<answers2.size(); i++) {
                tmp = (String[])answers2.get(i);
                for (int j=0; j<tmp.length; j++) {
                    tmpAoA2[i][j] = tmp[j];
                }
            }
            resultTable2 = new JTable(tmpAoA2, tableNames);

            resultTable2.setModel(new javax.swing.table.AbstractTableModel() {
                public String getColumnName(int column) {
                    if (column < tableNames.length)
                        return tableNames[column].toString();
                    return "";
                }
                public int getColumnCount() {
                    return tableNames.length;
                }
                public int getRowCount() {
                    return answers2.size();
                }
                public Object getValueAt(int row, int col) {
                    return tmpAoA2[row][col];
                }
            });
            
            resultTable2.setBackground(new java.awt.Color(238, 238, 238));
            resultTable2.setGridColor(new java.awt.Color(238, 238, 238));
          //resultTable2.setPreferredSize(new Dimension(jPanel_PadBottom2.getWidth()-30,jPanel_PadBottom2.getHeight()));
            resultTable2.setPreferredSize(new Dimension(jPanel_PadBottom2.getWidth()-30,jScrollPane2.getHeight()));
          //resultTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            resultTable2.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
            int width = jScrollPane1.getWidth()-30;
            resultTable2.getColumnModel().getColumn(0).setPreferredWidth((int)(width*.15));
          //resultTable2.getColumnModel().getColumn(1).setPreferredWidth((int)(width*.15));
            resultTable2.getColumnModel().getColumn(2).setPreferredWidth(1);
            resultTable2.getColumnModel().getColumn(3).setPreferredWidth(1);
            resultTable2.getColumnModel().getColumn(4).setPreferredWidth(1);
            resultTable2.getColumnModel().getColumn(5).setPreferredWidth(5);
            resultTable2.getColumnModel().getColumn(6).setPreferredWidth(10);
            
            final java.awt.event.ActionEvent innerevt = evt;
            jScrollPane2.setViewportView(resultTable2);
            
            resultTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    if( evt.getButton() == MouseEvent.BUTTON1 ){
                           TableModel tm = resultTable2.getModel();
                           // Download
                           // COPY file to upload directory with MD5 as the name
                           try {
                                // We assume the http site has the same address as the database
                                // Note: Java and PHP's session doesn't get along
                                //   with JAVA, so we AUTH on each request, the php
                                //   version had to be modified to allow this.
                                URL u = new URL("http://" + ServerCombobox2.getSelectedItem() + ServerCombobox3.getSelectedItem() + "get.php?md5=" + tm.getValueAt(resultTable2.getSelectedRow(),7) + "&filename=" + tm.getValueAt(resultTable2.getSelectedRow(),8) + "&username=" + UsernameCombobox3.getText() + "&password=" + PasswordComboBox3.getText());
                                InputStream in = u.openStream();
                                OutputStream out = new FileOutputStream(jTextField2.getText() + File.separator + tm.getValueAt(resultTable2.getSelectedRow(),7));
                                boolean endOfSourceFile = false;
                                while(!endOfSourceFile) {
                                    int readData = in.read();
                                    if(readData == -1)
                                        endOfSourceFile = true;
                                    else {
                                        out.write(readData);
                                    }
                                }

                                out.close();
                                in.close();
                           }catch(IOException e){System.out.println(e);}
                            
                            // mysql
                            String innerSqlQuery = "INSERT INTO documents(filename,md5,title,author,keywords,related_author,studygroup,classification,publicationdate) VALUES ('"
                            + tm.getValueAt(resultTable2.getSelectedRow(),8).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),7).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),0).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),1).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),3).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),2).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),4).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),5).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),6).toString() +"')";
                            // sql class returns boolean that I am not too interested in.
                            if (localSql.insert(innerSqlQuery)){}
                            // redraw table
                            jButton16ActionPerformed(innerEvent);
                    }
                }
            });
            
        } else {jScrollPane2.setViewportView(null);}
        this.repaint();
        
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // Log into remote database
        sql remoteSql;
        
        try {
            remoteSql = new sql(UsernameCombobox2.getText(),PasswordComboBox2.getText(),ServerCombobox2.getSelectedItem().toString(),"digitallibrary"); 
        }catch(com.mysql.jdbc.CommunicationsException e){
            throw new popupException("Please check connection to MySQL database");
        }catch(Exception f){
            throw new popupException(f);
        }
        
        final java.awt.event.ActionEvent innerEvent = evt;
            
        String sqlQuery = "select documentid, md5 from documents";
        String[] retrieve = {"documentid","md5"};
        ArrayList remoteAnswers  = remoteSql.query2d(sqlQuery, retrieve);
        ArrayList localAnswers  = localSql.query2d(sqlQuery, retrieve);

        sqlQuery = "select * from documents where";
        int toSync = 0;
        boolean found = false;
        System.out.println("Local answer size " + localAnswers.size());
        for (int i=0; i<localAnswers.size(); i++){
            for (int j=0; j<remoteAnswers.size(); j++) {
                System.out.println("if " + ((String[])localAnswers.get(i))[1] + " AND " + ((String[])remoteAnswers.get(j))[1]);
                if (((String[])localAnswers.get(i))[1].equals(((String[])remoteAnswers.get(j))[1])){
                    found = true;
                    System.out.println("Not syncing" + ((String[])localAnswers.get(i))[1]);
                }
            }
            if (!found) {
                System.out.println("Going to upload " + ((String[])localAnswers.get(i))[0]);
                if (toSync == 0) {
                    sqlQuery = sqlQuery.concat(" documentid='" + ((String[])localAnswers.get(i))[0] + "'");
                }else {
                    sqlQuery = sqlQuery.concat(" or documentid='" + ((String[])localAnswers.get(i))[0] + "'");    
                }
            toSync++;
            }
        found = false;
        }

        System.out.println(sqlQuery);
        if (toSync > 0) {
            String[] retrieve2 = {"title","author","related_author","keywords","studygroup","classification","publicationdate","md5","filename","documentid"};
            final ArrayList answers  = localSql.query2d(sqlQuery, retrieve2);
            String[] tmp = new String[answers.size()];

            final Object[] tableNames = {"Title","Author","Related Author","Keywords","Group","Classification","Date"};
            
            String tmpline = new String();
            tmp = (String[])answers.get(0);
            final Object[][] tmpAoA2 = new String[answers.size()+1][tmp.length];
        
                    for (int i=0; i<answers.size(); i++) {
                tmp = (String[])answers.get(i);
                for (int j=0; j<tmp.length; j++) {
                    tmpAoA2[i][j] = tmp[j];
                }
            }
            resultTable2 = new JTable(tmpAoA2, tableNames);

            resultTable2.setModel(new javax.swing.table.AbstractTableModel() {
                public String getColumnName(int column) {
                    if (column < tableNames.length)
                        return tableNames[column].toString();
                    return "";
                }
                public int getColumnCount() {
                    return tableNames.length;
                }
                public int getRowCount() {
                    return answers.size();
                }
                public Object getValueAt(int row, int col) {
                    return tmpAoA2[row][col];
                }
            });
            
            resultTable2.setBackground(new java.awt.Color(238, 238, 238));
            resultTable2.setGridColor(new java.awt.Color(238, 238, 238));
          //resultTable2.setPreferredSize(new Dimension(jPanel_PadBottom2.getWidth()-30,jPanel_PadBottom2.getHeight()));
            resultTable2.setPreferredSize(new Dimension(jPanel_PadBottom2.getWidth()-30,jScrollPane2.getHeight()));
          //resultTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            int width = jScrollPane1.getWidth()-30;
            resultTable2.getColumnModel().getColumn(0).setPreferredWidth((int)(width*.15));
          //resultTable2.getColumnModel().getColumn(1).setPreferredWidth((int)(width*.15));
            resultTable2.getColumnModel().getColumn(2).setPreferredWidth(1);
            resultTable2.getColumnModel().getColumn(3).setPreferredWidth(1);
            resultTable2.getColumnModel().getColumn(4).setPreferredWidth(1);
            resultTable2.getColumnModel().getColumn(5).setPreferredWidth(5);
            resultTable2.getColumnModel().getColumn(6).setPreferredWidth(10);
            
            final java.awt.event.ActionEvent innerevt = evt;
            final sql innerRemoteSql = remoteSql;
            jScrollPane2.setViewportView(resultTable2);
            
            resultTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                        if( evt.getButton() == MouseEvent.BUTTON1 ){
                                 
                            TableModel tm = resultTable2.getModel();
                            //System.out.println("Going to sync this file" + tm.getValueAt(resultTable2.getSelectedRow(),9).toString());

                            // Post
                            // Note: Java and PHP's session doesn't get along
                            //   with JAVA, so we AUTH on each request, the php
                            //   version had to be modified to allow this.
                            Post post = new Post(tm.getValueAt(resultTable2.getSelectedRow(),7).toString(),"http://" + ServerCombobox2.getSelectedItem() + ServerCombobox3.getSelectedItem() ,jTextField2.getText(),UsernameCombobox3.getText(),PasswordComboBox3.getText());
                            
                            // mysql
                            String innerSqlQuery = "INSERT INTO documents(filename,md5,title,author,keywords,related_author,studygroup,classification,publicationdate) VALUES ('"
                            + tm.getValueAt(resultTable2.getSelectedRow(),8).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),7).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),0).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),1).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),3).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),2).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),4).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),5).toString() +"','"
                            + tm.getValueAt(resultTable2.getSelectedRow(),6).toString() +"')";
                            if (innerRemoteSql.insert(innerSqlQuery)){}
                            // redraw table
                            jButton15ActionPerformed(innerEvent);
                        }
                }
            });
            
        } else {jScrollPane2.setViewportView(null);}
        this.repaint();
        
    }//GEN-LAST:event_jButton15ActionPerformed
    
    private void StartupStuff(){

        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/digitallibrary/icons/DL.png")).getImage()) ;
        /* Removed in favour of platform independent configData, however
           It would be good to allows users to override with a config file
        try {
            XMLDecoder dd = new XMLDecoder(
                    new BufferedInputStream(
                    new FileInputStream("DigiOut.xml"))
            );
            jTextField2.setText((String)dd.readObject());
            jTextField3.setText((String)dd.readObject());
            jTextField4.setText((String)dd.readObject());
            dd.close();
        }catch(Exception e){
            throw new popupException("Please check DigiOut.xml file:" + e);
        }
        */
        
        configData config  = new configData();
        jTextField2.setText((String)config.getLocalUploadDir());
        jTextField3.setText((String)config.getLocalDbUsername());
        jTextField4.setText((String)config.getLocalDbPassword());
        
        try {
            localSql = new sql(jTextField3.getText(),(String)jTextField4.getText(),"127.0.0.1","digitallibrary"); 
            //System.out.println(jTextField4.getText());
        }catch(Exception e){
        jTabbedPane1.setSelectedIndex(4);
            throw new popupException("Connection failed.  Set your password and storage directory below and hit save, also, ensure MySQL is running");
        }
        
        // select current groups
        String sqlQuery = "select groupname from groups group by groupname";
        String[] retrieve = {"groupname"};
        ArrayList answers  = localSql.query2d(sqlQuery, retrieve);
        
        String[] groups = new String[answers.size()];
        String[] tmp = new String[answers.size()];
        
        for (int i=0; i<answers.size(); i++) {
            tmp = (String[])answers.get(i);
            groups[i] = tmp[0];
        }

        jList1.setListData(groups);
        jScrollPane3.setViewportView(jList1);
    }
    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
            String Query = "delete from groups where groupname='" + jList1.getSelectedValue() +"'";
            System.out.println(jList1.getSelectedIndex());
            System.out.println(jList1.getSelectedValue());
            if (!localSql.insert(Query)){}

            // Removing value from the jList always got errors, so we'return going
            // to Re-select from the DB, this is an area that could be improved.
            // select current groups
            String sqlQuery = "select groupname from groups group by groupname";
            String[] retrieve = {"groupname"};
            ArrayList answers  = localSql.query2d(sqlQuery, retrieve);
            
            String[] groups = new String[answers.size()];
            String[] tmp = new String[answers.size()];
            
            for (int i=0; i<answers.size(); i++) {
                tmp = (String[])answers.get(i);
                groups[i] = tmp[0];
            }

            jList1.setListData(groups);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jPanel_PadTopAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadTopAncestorResized
        if (jTabbedPane1.getSelectedIndex() == 0) {
            jPanel_PadTop.setPreferredSize(new java.awt.Dimension(Login.getWidth(),(Login.getHeight()-150)/3));
            jPanel_PadTop.setSize(jPanel_PadTop.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadTopAncestorResized

    private void jPanel_PadBottomAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadBottomAncestorResized
        if (jTabbedPane1.getSelectedIndex() == 0) {
            jPanel_PadBottom.setPreferredSize(new java.awt.Dimension(Login.getWidth(),((Login.getHeight()-150)/3)*2));
            jPanel_PadBottom.setSize(jPanel_PadBottom.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadBottomAncestorResized

    private void jPanel_PadEastAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadEastAncestorResized
        if (jTabbedPane1.getSelectedIndex() == 0) {
            jPanel_PadEast.setPreferredSize(new java.awt.Dimension((Login.getWidth()-300)/2,72));
            jPanel_PadEast.setSize(jPanel_PadEast.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadEastAncestorResized

    private void jPanel_PadWestAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadWestAncestorResized
        if (jTabbedPane1.getSelectedIndex() == 0) {
            jPanel_PadWest.setPreferredSize(new java.awt.Dimension((Login.getWidth()-300)/2,72));
            jPanel_PadWest.setSize(jPanel_PadWest.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadWestAncestorResized

    private void LoginComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_LoginComponentShown
        // This is to resize componends
        // Instead of multiple functions doing it all over the place
        // we call a similar function to do it all

        UploadComponentShown(evt);

    }//GEN-LAST:event_LoginComponentShown

    private void jPanel_PadBottom2AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadBottom2AncestorResized
        if (jTabbedPane1.getSelectedIndex() == 1) {
            jPanel_PadBottom2.setPreferredSize(new java.awt.Dimension(Login.getWidth(),(View.getHeight() - 310)));
            jPanel_PadBottom2.setSize(jPanel_PadBottom2.getPreferredSize());
            resultTable.setPreferredSize(new java.awt.Dimension(Login.getWidth()-30,(View.getHeight() - 310)));
            this.repaint();
        }
    }//GEN-LAST:event_jPanel_PadBottom2AncestorResized

    private void jPanel_PadEast2AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadEast2AncestorResized
        if (jTabbedPane1.getSelectedIndex() == 1) {
            jPanel_PadEast1.setPreferredSize(new java.awt.Dimension((Login.getWidth()-930)/2,72));
            jPanel_PadEast1.setSize(jPanel_PadEast2.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadEast2AncestorResized

    private void jPanel_PadWest2AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadWest2AncestorResized
        if (jTabbedPane1.getSelectedIndex() == 1) {
            jPanel_PadWest2.setPreferredSize(new java.awt.Dimension((Login.getWidth()-930)/2,72));
            jPanel_PadWest2.setSize(jPanel_PadWest2.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadWest2AncestorResized

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        // If combo is clicked and its active, make fields inactive
        // and vise versa
        authorContains.setEnabled(jCheckBox1.isSelected());
        authorStarts.setEnabled(jCheckBox1.isSelected());
        authorEnds.setEnabled(jCheckBox1.isSelected());
    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void authorContainsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorContainsKeyTyped
        jCheckBox1.setSelected(true);
    }//GEN-LAST:event_authorContainsKeyTyped

    private void authorStartsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorStartsKeyTyped
        jCheckBox1.setSelected(true);
    }//GEN-LAST:event_authorStartsKeyTyped

    private void authorEndsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorEndsKeyTyped
        jCheckBox1.setSelected(true);
    }//GEN-LAST:event_authorEndsKeyTyped

    private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseClicked
        relatedContains.setEnabled(jCheckBox2.isSelected());
        relatedStarts.setEnabled(jCheckBox2.isSelected());
        relatedEnds.setEnabled(jCheckBox2.isSelected());
    }//GEN-LAST:event_jCheckBox2MouseClicked

    private void relatedContainsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_relatedContainsKeyTyped
        jCheckBox2.setSelected(true);
    }//GEN-LAST:event_relatedContainsKeyTyped

    private void relatedStartsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_relatedStartsKeyTyped
        jCheckBox2.setSelected(true);
    }//GEN-LAST:event_relatedStartsKeyTyped

    private void relatedEndsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_relatedEndsKeyTyped
        jCheckBox2.setSelected(true);
    }//GEN-LAST:event_relatedEndsKeyTyped

    private void jCheckBox3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox3MouseClicked
        titleContains.setEnabled(jCheckBox3.isSelected());
        titleStarts.setEnabled(jCheckBox3.isSelected());
        titleEnds.setEnabled(jCheckBox3.isSelected());
    }//GEN-LAST:event_jCheckBox3MouseClicked

    private void titleContainsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleContainsKeyTyped
        jCheckBox3.setSelected(true);
    }//GEN-LAST:event_titleContainsKeyTyped

    private void titleStartsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleStartsKeyTyped
        jCheckBox3.setSelected(true);
    }//GEN-LAST:event_titleStartsKeyTyped

    private void titleEndsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_titleEndsKeyTyped
        jCheckBox3.setSelected(true);
    }//GEN-LAST:event_titleEndsKeyTyped

    private void jCheckBox4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox4MouseClicked
        dateStarts.setEnabled(jCheckBox4.isSelected());
        dateEnds.setEnabled(jCheckBox4.isSelected());
    }//GEN-LAST:event_jCheckBox4MouseClicked

    private void jCheckBox5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox5MouseClicked
        group.setEnabled(jCheckBox5.isSelected());
        groupStarts.setEnabled(jCheckBox5.isSelected());
        groupEnds.setEnabled(jCheckBox5.isSelected());
    }//GEN-LAST:event_jCheckBox5MouseClicked

    private void groupStartsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_groupStartsKeyTyped
        jCheckBox5.setSelected(true);
    }//GEN-LAST:event_groupStartsKeyTyped

    private void groupEndsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_groupEndsKeyTyped
        jCheckBox5.setSelected(true);
    }//GEN-LAST:event_groupEndsKeyTyped

    private void jCheckBox6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox6MouseClicked
        keywordsContains.setEnabled(jCheckBox6.isSelected());
        keywordsNot.setEnabled(jCheckBox6.isSelected());
    }//GEN-LAST:event_jCheckBox6MouseClicked

    private void keywordsContainsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keywordsContainsKeyTyped
        jCheckBox6.setSelected(true);
    }//GEN-LAST:event_keywordsContainsKeyTyped

    private void keywordsNotKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keywordsNotKeyTyped
        jCheckBox6.setSelected(true);
    }//GEN-LAST:event_keywordsNotKeyTyped

    private void jCheckBox7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox7MouseClicked
        classification.setEnabled(jCheckBox7.isSelected());
    }//GEN-LAST:event_jCheckBox7MouseClicked

    private void classificationPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_classificationPopupMenuWillBecomeVisible
        jCheckBox7.setSelected(true);
    }//GEN-LAST:event_classificationPopupMenuWillBecomeVisible

    private void groupPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_groupPopupMenuWillBecomeVisible
        jCheckBox5.setSelected(true);
    }//GEN-LAST:event_groupPopupMenuWillBecomeVisible

    private void dateStartsPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_dateStartsPopupMenuWillBecomeVisible
        jCheckBox4.setSelected(true);
    }//GEN-LAST:event_dateStartsPopupMenuWillBecomeVisible

    private void dateEndsPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_dateEndsPopupMenuWillBecomeVisible
        jCheckBox4.setSelected(true);
    }//GEN-LAST:event_dateEndsPopupMenuWillBecomeVisible

    private void runSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runSearchActionPerformed
        // Form mysql query from input
        // "where now()" added so all appended "where" statments can be
        // "and where" and we don't need to keep testing if we're first
        String query = new String("select * from documents where now()");
        
        // Not sure if ite quicker to call getText twice,
        // or call it once, create a new string object to
        // store it in and work from that...
        // Going to assume creating new objects is a big thing.
        
        // COMMENT
        lastSelected = 0;
        
        // BTW, perhaps I should get paid by the "if" :)
        // Author
        if (jCheckBox1.isSelected()) {
            if (authorContains.getText().length() > 0)
                query = query.concat(" and author like '%"+authorContains.getText()+"%'");
            if (authorStarts.getText().length() > 0)
                query = query.concat(" and author like '"+authorStarts.getText()+"%'");
            if (authorEnds.getText().length() > 0)
                query = query.concat(" and author like '%"+authorEnds.getText()+"'");
        }
        // Related Authors
        if (jCheckBox2.isSelected()) {
            if (relatedContains.getText().length() > 0)
                query = query.concat(" and related_author like '%"+relatedContains.getText()+"%'");
            if (relatedStarts.getText().length() > 0)
                query = query.concat(" and related_author like '"+relatedStarts.getText()+"%'");
            if (relatedEnds.getText().length() > 0)
                query = query.concat(" and related_author like '%"+relatedEnds.getText()+"'");
        }
        // Title
        if (jCheckBox3.isSelected()) {
            if (titleContains.getText().length() > 0)
                query = query.concat(" and title like '%"+titleContains.getText()+"%'");
            if (titleStarts.getText().length() > 0)
                query = query.concat(" and title like '"+titleStarts.getText()+"%'");
            if (titleEnds.getText().length() > 0)
                query = query.concat(" and title like '%"+titleEnds.getText()+"'");
        }
        // Date
        if (jCheckBox4.isSelected()) {
            if (dateStarts.getSelectedIndex() > 0)
                query = query.concat(" and publicationdate >= '"+dateStarts.getSelectedItem()+"'");
            if (dateEnds.getSelectedIndex() > 0)
                query = query.concat(" and publicationdate <= '"+dateEnds.getSelectedItem()+"'");
        }
        // Group
        if (jCheckBox5.isSelected()) {
            if (group.getSelectedIndex() > 0)
                query = query.concat(" and studygroup = '"+group.getSelectedItem()+"'");
            if (groupStarts.getText().length() > 0)
                query = query.concat(" and studygroup like '"+groupStarts.getText()+"%'");
            if (groupEnds.getText().length() > 0)
                query = query.concat(" and studygroup like '%"+groupEnds.getText()+"'");
        }
        // Keywords
        if (jCheckBox6.isSelected()) {
            if (keywordsContains.getText().length() > 0)
                query = query.concat(" and keywords like '%"+keywordsContains.getText()+"%'");
            if (keywordsNot.getText().length() > 0)
                query = query.concat(" and keywords not like '%"+keywordsNot.getText()+"%'");
        }
        // Classification
        if (jCheckBox7.isSelected()) {
            if (group.getSelectedIndex() > 0)
                query = query.concat(" and classification = '"+classification.getSelectedItem()+"'");
        }
        //System.out.println(query);
        
        String[] retrieve = {"title","author","related_author","keywords","studygroup","classification","publicationdate","md5","filename","documentid"};
        final ArrayList answers  = localSql.query2d(query, retrieve);
        String[] tmp = new String[answers.size()];
        if (answers.size() > 0) {
            final Object[] tableNames = {"Title","Author","Related Author","Keywords","Group","Classification","Date"};
            
            String tmpline = new String();
            tmp = (String[])answers.get(0);
            final Object[][] tmpAoA = new String[answers.size()+1][tmp.length];
            
            for (int i=0; i<answers.size(); i++) {
                tmp = (String[])answers.get(i);
                for (int j=0; j<tmp.length; j++) {
                    tmpAoA[i][j] = tmp[j];
                }
            }
            
            resultTable = new JTable(tmpAoA, tableNames);
            
            // Want to hide md5sums within the table without showing them to
            // the user, to do this we override standard jtable stuff
            // and lie about the amount of columns we've got. cool :)
            resultTable.setModel(new javax.swing.table.AbstractTableModel() {
                public String getColumnName(int column) {
                    if (column < tableNames.length)
                        return tableNames[column].toString();
                    return null;
                }
                public int getColumnCount() {
                    return tableNames.length;
                }
                public int getRowCount() {
                    return answers.size();
                }
                public Object getValueAt(int col, int row) {
                    return tmpAoA[col][row];
                }
            });
            
            resultTable.setBackground(new java.awt.Color(238, 238, 238));
            resultTable.setGridColor(new java.awt.Color(238, 238, 238));
            resultTable.setPreferredSize(new Dimension(jPanel_PadBottom2.getWidth()-30,jPanel_PadBottom2.getHeight()));
//            resultTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            int width = jScrollPane1.getWidth()-30;
            resultTable.getColumnModel().getColumn(0).setPreferredWidth((int)(width*.15));
            //resultTable.getColumnModel().getColumn(1).setPreferredWidth((int)(width*.15));
            resultTable.getColumnModel().getColumn(2).setPreferredWidth(1);
            resultTable.getColumnModel().getColumn(3).setPreferredWidth(1);
            resultTable.getColumnModel().getColumn(4).setPreferredWidth(1);
            resultTable.getColumnModel().getColumn(5).setPreferredWidth(5);
            resultTable.getColumnModel().getColumn(6).setPreferredWidth(10);
//            resultTable.getColumnModel().getColumn(7).setPreferredWidth(0);            

            jScrollPane1.setViewportView(resultTable);            
            
            resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                  //  try {
                        if( evt.getButton() == MouseEvent.BUTTON3 ){
                            //System.out.println("Detected right click");
                            //System.out.println(evt.getX());
                            //System.out.println(evt.getY());
                            
                            // This selects the row when right clicked.
                             Point p = evt.getPoint();
                             int row = resultTable.rowAtPoint(p);
                             if((row != -1)&&(resultTable.getSelectedRows().length < 2))
                                resultTable.setRowSelectionInterval(row,row);
                            
                            rightClick.show(resultTable, evt.getX(), evt.getY());
                            jPanel_view.repaint();
                        }
                        if( evt.getButton() == MouseEvent.BUTTON1 ){
                            Point p = evt.getPoint();
                            if ((lastSelected == resultTable.getSelectedRow()+1)&&(resultTable.rowAtPoint(p) != -1)&&(resultTable.getSelectedRows().length == 1)) {
                                TableModel tm = resultTable.getModel();

                                if (Desktop.isDesktopSupported()) {
                                    try {
                                        //System.out.println((String)jTextField2.getText() +"/"+ tm.getValueAt(resultTable.getSelectedRow(),7));
                                        Desktop.getDesktop().open(new File(jTextField2.getText() + File.separator + tm.getValueAt(resultTable.getSelectedRow(),7)));
                                    } catch(Exception e){throw new popupException(e);} 
                                }
                                //Process child = Runtime.getRuntime().exec("cmd /C \""+ jTextField2.getText() +"/"+ tm.getValueAt(resultTable.getSelectedRow(),7)+"\"");
                            }
                            lastSelected = resultTable.getSelectedRow()+1;
                        }
                  //  } catch (IOException e) {}
                }
            });
            
        } else {jScrollPane1.setViewportView(null);}
        this.repaint();
    }//GEN-LAST:event_runSearchActionPerformed

    private void ViewComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_ViewComponentShown

        jPanel_PadBottom2.setPreferredSize(new java.awt.Dimension(Login.getWidth(),(View.getHeight() - 310)));
        jPanel_PadBottom2.setSize(jPanel_PadBottom2.getPreferredSize());
        jPanel_PadEast2.setPreferredSize(new java.awt.Dimension((View.getWidth()-930)/2,72));
        jPanel_PadEast2.setSize(jPanel_PadEast2.getPreferredSize());
        jPanel_PadWest2.setPreferredSize(new java.awt.Dimension((View.getWidth()-930)/2,72));
        jPanel_PadWest2.setSize(jPanel_PadWest2.getPreferredSize());
        resultTable.setPreferredSize(new java.awt.Dimension(Login.getWidth()-30,(View.getHeight() - 310)));

        // populate Groups combobox
        jPanel_view.remove(group);
        
        String[] retrieve = {"groupname"};
        ArrayList answers  = localSql.query2d("select groupname from groups", retrieve);
        String[] tmp  = new String[answers.size()];
        String[] tmp2 = new String[answers.size()+1];
        tmp2[0] = "any";
        for (int i=0; i<answers.size(); i++) {
            tmp = (String[])answers.get(i);
            for (int j=0; j<tmp.length; j++) {
                tmp2[i+1] = tmp[0];
            }
        }
        
        group = new JComboBox(tmp2);        
        group.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                groupPopupMenuWillBecomeVisible(evt);
            }
        });
        
        jPanel_view.add(group, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 180, -1));
        this.repaint();
    }//GEN-LAST:event_ViewComponentShown

    private void jPanel_PadTop1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadTop1AncestorResized
        if (jTabbedPane1.getSelectedIndex() == 2) {
            jTextField1.setPreferredSize(new java.awt.Dimension(Login.getWidth()-500,25));
            jTextField1.setSize(jTextField1.getPreferredSize());
            jPanel_PadTop1.setPreferredSize(new java.awt.Dimension(Login.getWidth(),(Login.getHeight()-400)/3));
            jPanel_PadTop1.setSize(jPanel_PadTop1.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadTop1AncestorResized

    private void jPanel_PadBottom1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadBottom1AncestorResized
        // Only resizing active panel speeds up interface
        if (jTabbedPane1.getSelectedIndex() == 2) {
            // jPanel_PadBottom1.setPreferredSize(new java.awt.Dimension(Login.getWidth(),((Login.getHeight()-150)/3)*2));
            // jPanel_PadBottom1.setSize(jPanel_PadBottom1.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadBottom1AncestorResized

    private void jPanel_PadEast1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadEast1AncestorResized
        if (jTabbedPane1.getSelectedIndex() == 2) {
            jPanel_PadEast1.setPreferredSize(new java.awt.Dimension((Login.getWidth()-700)/2,72));
            jPanel_PadEast1.setSize(jPanel_PadEast1.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadEast1AncestorResized

    private void jPanel_PadWest1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jPanel_PadWest1AncestorResized
        if (jTabbedPane1.getSelectedIndex() == 2) {
            jPanel_PadWest1.setPreferredSize(new java.awt.Dimension((Login.getWidth()-700)/2,72));
            jPanel_PadWest1.setSize(jPanel_PadWest1.getPreferredSize());
        }
    }//GEN-LAST:event_jPanel_PadWest1AncestorResized

    private void jTextField1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jTextField1AncestorResized
        if (jTabbedPane1.getSelectedIndex() == 2) {
            jTextField1.setPreferredSize(new java.awt.Dimension(jPanel_upload.getWidth()-200,25));
            jTextField1.setSize(jTextField1.getPreferredSize());
        }
    }//GEN-LAST:event_jTextField1AncestorResized

    private void jButton_upload_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_upload_browseActionPerformed
        fileChooser request = new fileChooser(this, true, true);

        // Java get improperly corrupt if you don't change the look and feel back
        // despite the previous change was only supposed to effect this dialog!
        //try {
        //    System.out.println("Changing back");
        //        javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.MetalLookAndFeel");
        //        javax.swing.SwingUtilities.updateComponentTreeUI(this);
        //}catch(Exception e){ /* Not windows? fine :) */}

        // Note:  I'm directly accessing the classes variables, this is a result of
        //   JCU course scheduals not teaching how to code nicely until
        //   the VERY last subject before schedules.
        
        try {
            String FileList = new String();
            fileArray = new String[request.Var.length];
            fileArray = request.Var;
            fileArray2 = new String[request.Var2.length];
            fileArray2 = request.Var2;
            for (int i=0; i<request.Var.length; i++) {
                FileList = FileList +"\""+request.Var[i]+"\" ";
            }
            jTextField1.setText(FileList);
        }catch(Exception e){}
    }//GEN-LAST:event_jButton_upload_browseActionPerformed

    private void jButton_upload_storeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_upload_storeActionPerformed
        if (!jTextField1.getText().equals("")) {
            classificationArray = new String[fileArray.length][8];
            for (int i=0; i<fileArray.length; i++) {

                // TODO: call pdf library and populare classificationArray with it.
                
                try {
                    // Test if its a PDF
                    Pattern pattern = Pattern.compile("(?i).pdf$");
                    Matcher matcher = pattern.matcher(fileArray[i]);
                    if (matcher.find()) {
                        // Looks like a PDF, lets open it up using official adobe driver
                        // Keep in mine that this library throws many NullPointerExceptions
                        PDFDocument acrobat = new PDFDocument(new File(fileArray[i]));
                        // Change date format to year only
                        String localDate = new String("");
                        try {
                            pattern = Pattern.compile("[0-9]{4}");
                            matcher = pattern.matcher(acrobat.getDocumentInfo("CreationDate"));
                            matcher.find();
                            localDate = matcher.group(0);
                        }catch(Exception e){}
                        
                        // Create object we can get filename from, OS indifferent
                        File tempFile = new File(fileArray[i]);
                        
                        // We have access to all the information we can find, lets ask for classification
                        // We'll plug what we know into the GUI, good enough place as any to store it :)
                        
                        try {
                            classificationArray[i][0] = acrobat.getDocumentInfo("Author");
                            //System.out.println("Acrobat File " + i + "Author is" + acrobat.getDocumentInfo("Author"));
                        }catch(Exception e){}
                        try {
                            classificationArray[i][1] = acrobat.getDocumentInfo("Title");
                        }catch(Exception e){}
                        try {
                            classificationArray[i][2] = acrobat.getDocumentInfo("Keywords");
                        }catch(Exception e){}
                        classificationArray[i][3] = localDate;
                    }
                    if (jPanel_upload.getComponentZOrder(classify) < 0) {
                        jPanel_upload.add(classify);
                        this.repaint();
                    }
                    ClassificationFilename.setText(fileArray2[0]);
                    
                    jPanel_upload.add(classify);
                    this.repaint();
                }catch(Exception e){throw new popupException(e);};
            }
            ClassificationAuthor.setText(classificationArray[0][0]);
            ClassificationTitle.setText(classificationArray[0][1]);
            ClassificationKeywords.setText(classificationArray[0][2]);
            ClassificationPublicationDate.setSelectedItem(classificationArray[0][3]);
            ClassificationRelatedAuthors.setText("");
            ClassificationClassification.setSelectedIndex(0);
            ClassificationResearchGroup.setSelectedIndex(0);
            jLabel14.setText("of   " + fileArray.length);
        }

        // populate Groups combobox
        classify.remove(ClassificationResearchGroup);
        
        String[] retrieve = {"groupname"};
        ArrayList answers  = localSql.query2d("select groupname from groups", retrieve);
        String[] tmp  = new String[answers.size()];
        String[] tmp2 = new String[answers.size()+1];
        tmp2[0] = "any";
        for (int i=0; i<answers.size(); i++) {
            tmp = (String[])answers.get(i);
            for (int j=0; j<tmp.length; j++) {
                tmp2[i+1] = tmp[0];
            }
        }

        ClassificationResearchGroup = new JComboBox(tmp2);
         classify.add(ClassificationResearchGroup, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, -1, -1));

        this.repaint();
        
    }//GEN-LAST:event_jButton_upload_storeActionPerformed

    private void UploadComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_UploadComponentShown
        jPanel_PadTop1.setPreferredSize(new java.awt.Dimension(Login.getWidth(),(Login.getHeight()-400)/3));
        jPanel_PadTop1.setSize(jPanel_PadTop1.getPreferredSize());
        //jPanel_PadBottom1.setPreferredSize(new java.awt.Dimension(Login.getWidth(),((Login.getHeight()-150)/3)*2));
        //jPanel_PadBottom1.setSize(jPanel_PadBottom1.getPreferredSize());
        jPanel_PadEast1.setPreferredSize(new java.awt.Dimension((Login.getWidth()-700)/2,72));
        jPanel_PadEast1.setSize(jPanel_PadEast1.getPreferredSize());
        jPanel_PadWest1.setPreferredSize(new java.awt.Dimension((Login.getWidth()-700)/2,72));
        jPanel_PadWest1.setSize(jPanel_PadWest1.getPreferredSize());
        jTextField1.setPreferredSize(new java.awt.Dimension(jPanel_upload.getWidth()-200,25));
        jTextField1.setSize(jTextField1.getPreferredSize());
        this.repaint();
    }//GEN-LAST:event_UploadComponentShown

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        requestInfoDialog request = new requestInfoDialog(this, true,"Enter group name");
        this.repaint();
        request.show();
        
        if (request.Var) {
            // Add the group to the database and refresh groups list
            String Query = "insert into groups(groupname) values('" + request.dialog +"')";
            if (!localSql.insert(Query)){}
            
            // select current groups
            String sqlQuery = "select groupname from groups group by groupname";
            String[] retrieve = {"groupname"};
            ArrayList answers  = localSql.query2d(sqlQuery, retrieve);
            
            String[] groups = new String[answers.size()];
            String[] tmp = new String[answers.size()];
            
            for (int i=0; i<answers.size(); i++) {
                tmp = (String[])answers.get(i);
                groups[i] = tmp[0];
            }

            jList1.setListData(groups);
            jScrollPane3.setViewportView(jList1);
            
            jList1.setSelectedValue(request.dialog, true);
            System.out.println(jList1.getSelectedValue());
        }else{
            throw new popupException("Group creation canceled due to empty groupname");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        fileChooser request = new fileChooser(this, true, false);
        String FileList = new String();        
        jTextField2.setText(request.tmpFile);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // Read in preferences
        /*
        try {
            XMLEncoder ee = new XMLEncoder(
                    new BufferedOutputStream(
                        new FileOutputStream("DigiOut.xml"))
                    );

            String UploadDir = new String(jTextField2.getText());
            String LocalDbUsername = jTextField3.getText();
            String LocalDbPassword = jTextField4.getText();
            ee.writeObject(UploadDir);
            ee.writeObject(LocalDbUsername);
            ee.writeObject(LocalDbPassword);
            ee.close();
        }catch(Exception e){
            jTabbedPane1.setSelectedIndex(4);
            throw new popupException(e);
        }
        */
        // Rewriting XML storage to java.util.prefs.Preferences;
        // note, we should try the settings, then confirm if they fail.
        configData config = new configData();
        try {
        config.SetLocalUploadDir((String)jTextField2.getText());
        config.SetLocalDbUsername((String)jTextField3.getText());
        config.SetLocalDbPassword((String)jTextField4.getText());
        } catch(Exception e) {throw new popupException(e);}
        
        // Test database connection
        try {
            if (localSql.getCon().isClosed());
        }catch(popupException e){}
        catch(Exception e) {
            try {
                localSql = new sql(jTextField3.getText(),jTextField4.getText(),"127.0.0.1","digitallibrary"); 
                jTabbedPane1.setSelectedIndex(0);
            }catch(Exception ef){
            jTabbedPane1.setSelectedIndex(4);
            throw new popupException("Connection failed.  Check DLconfig.xml is correctly placed and contains" +
                    "the correct password");
            }
        }
            // select current groups
            String sqlQuery = "select groupname from groups group by groupname";
            String[] retrieve = {"groupname"};
            ArrayList answers  = localSql.query2d(sqlQuery, retrieve);
            
            String[] groups = new String[answers.size()];
            String[] tmp = new String[answers.size()];
            
            for (int i=0; i<answers.size(); i++) {
                tmp = (String[])answers.get(i);
                groups[i] = tmp[0];
            }

            jList1.setListData(groups);
            jScrollPane3.setViewportView(jList1);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void AdminComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_AdminComponentShown
    }//GEN-LAST:event_AdminComponentShown

    private void modifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyActionPerformed
        
    if (resultTable.getSelectedRow() < 0)
        throw new popupException("Please choose a file first");
 
        reclassify.remove(ClassificationResearchGroup1);
        
        String[] retrieve = {"groupname"};
        ArrayList answers  = localSql.query2d("select groupname from groups", retrieve);
        String[] tmp  = new String[answers.size()];
        String[] tmp2 = new String[answers.size()+1];
        tmp2[0] = "any";
        for (int i=0; i<answers.size(); i++) {
            tmp = (String[])answers.get(i);
            for (int j=0; j<tmp.length; j++) {
                tmp2[i+1] = tmp[0];
            }
        }

        ClassificationResearchGroup1 = new JComboBox(tmp2);
         reclassify.add(ClassificationResearchGroup1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, -1, -1));

        this.repaint();

    
        jScrollPane1.setViewportView(reclassify);
        TableModel tm = resultTable.getModel();

        ClassificationFilename1.setText(tm.getValueAt(resultTable.getSelectedRow(),8).toString());
        ClassificationAuthor1.setText(tm.getValueAt(resultTable.getSelectedRow(),1).toString());
        ClassificationRelatedAuthors1.setText(tm.getValueAt(resultTable.getSelectedRow(),2).toString());
        ClassificationTitle1.setText(tm.getValueAt(resultTable.getSelectedRow(),0).toString());
        ClassificationPublicationDate1.setSelectedItem(tm.getValueAt(resultTable.getSelectedRow(),6).toString());
        ClassificationResearchGroup1.setSelectedItem(tm.getValueAt(resultTable.getSelectedRow(),4).toString());
        ClassificationKeywords1.setText(tm.getValueAt(resultTable.getSelectedRow(),3).toString());
        ClassificationClassification1.setSelectedItem(tm.getValueAt(resultTable.getSelectedRow(),5).toString());

    }//GEN-LAST:event_modifyActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed

        // This was before right click selected a row, but we'll leave it here
        // for extra checking.
        if (resultTable.getSelectedRow() < 0)
            throw new popupException("Please choose a file first");
        
        confirmDialog request2 = new confirmDialog(this, true,"This will completely delete the file");
        this.repaint();
        request2.show();
            if(request2.Var) {
            TableModel tm = resultTable.getModel();

       // start loop for multiple deletes
            int[] selected = resultTable.getSelectedRows();
            for (int i=0; i<selected.length; i++) {

                System.out.println("Deleting " + tm.getValueAt(selected[i],7));                
                String[] retrieve = {"Count"};
                String Query = "select count(md5) as Count from documents where md5='" + tm.getValueAt(selected[i],7) + "'";
                String[] answers  = localSql.query(Query, retrieve); 

                if (answers[0].equals(new String("1"))) {
                    // Looks like there's only one file, so we can delete it physially
                    try  {
                        File tmpFileToDelete = new File(jTextField2.getText() +File.separator+ tm.getValueAt(selected[i],7));
                        tmpFileToDelete.delete();
                    }catch(Exception e){throw new popupException(e);}
                }
                Query = "delete from documents where documentid='" + tm.getValueAt(selected[i],9) +"'";
                if (!localSql.insert(Query)){}
                
            }                
                
                
                
                
/*                //Get the files we clicked on
                System.out.println("Deleting " + tm.getValueAt(resultTable.getSelectedRow(),7));                
                String[] retrieve = {"Count"};
                String Query = "select count(md5) as Count from documents where md5='" + tm.getValueAt(resultTable.getSelectedRow(),7) + "'";
                String[] answers  = localSql.query(Query, retrieve); 

                if (answers[0].equals(new String("1"))) {
                    // Looks like there's only one file, so we can delete it physially
                    try  {
                        File tmpFileToDelete = new File(jTextField2.getText() +"/"+ tm.getValueAt(resultTable.getSelectedRow(),7));
                        tmpFileToDelete.delete();
                    }catch(Exception e){throw new popupException(e);}
                }
                Query = "delete from documents where documentid='" + tm.getValueAt(resultTable.getSelectedRow(),9) +"'";
                if (!localSql.insert(Query)){}
*/
            
        // end loop for multiple deletes    
            
            
        }
        runSearchActionPerformed(evt);
    }//GEN-LAST:event_deleteActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        TableModel tm = resultTable.getModel();
        String sqlQuery = "update documents set " +
                "author='"               + ClassificationAuthor1.getText() +
                "', related_author='"    + ClassificationRelatedAuthors1.getText() +
                "', title='"             + ClassificationTitle1.getText() +
                "', publicationdate='"   + ClassificationPublicationDate1.getSelectedItem() +
                "', studygroup='"        + ClassificationResearchGroup1.getSelectedItem() +
                "', keywords='"          + ClassificationKeywords1.getText() +
                "', classification='"    + ClassificationClassification1.getSelectedItem() +
                "' where documentid='"   + tm.getValueAt(resultTable.getSelectedRow(),9) + "'";
                
                // Im not really interested in the returning boolean
                if (!localSql.insert(sqlQuery)){}

runSearchActionPerformed(evt);                
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Integer progress = new Integer(jLabel13.getText());
        progress--;

        try {
                FileInputStream fis = new FileInputStream(fileArray[progress]);
                BufferedInputStream bis = new BufferedInputStream(fis);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();

                int ch;
                while ((ch = bis.read()) != -1) {
                    baos.write(ch);
                }
                byte[] buffer = baos.toByteArray();
                MessageDigest algorithm = MessageDigest.getInstance("MD5");
                algorithm.reset();
                algorithm.update(buffer);
                byte[] digest = algorithm.digest();

                StringBuffer hexString = new StringBuffer();
                String tmp = new String();
                
                for (int j=0;j<digest.length;j++) {
                    Pattern pattern = Pattern.compile("(?i)^.{1}$");
                    Matcher matcher = pattern.matcher(Integer.toHexString(0xFF & digest[j]));
                    //pattern.matcher(Integer.toHexString(0xFF & digest[j]));
                    tmp = new String(Integer.toHexString(0xFF & digest[j]));
                    if (matcher.find()) {
                        hexString.append("0" + tmp);
                    } else {
                        hexString.append(Integer.toHexString(0xFF & digest[j]));
                    }
                }
                // Debug
                //System.out.println(hexString.toString());
                //System.out.println(fileArray[progress]);

                Pattern pattern = Pattern.compile(".[0-9a-zA-Z]+$");
                Matcher matcher = pattern.matcher(ClassificationFilename.getText());
                matcher.find();
                //System.out.println(matcher.group(0));
                
                // If title is empty use filename
                String tmpString = ClassificationTitle.getText();
                if (tmpString.equals("")) 
                    tmpString = ClassificationFilename.getText();
                
                String uploadFileDest = new String(jTextField2.getText() +File.separator+ hexString.toString() + matcher.group(0));
                String Statment = "INSERT INTO documents(filename,md5,title,author,keywords,related_author,studygroup,classification,publicationdate) VALUES ('"
                    +ClassificationFilename.getText()+"','"
                    +hexString.toString()+matcher.group(0)+"','"
                    +tmpString+"','"
                    +ClassificationAuthor.getText()+"','"
                    +ClassificationKeywords.getText()+"','"
                    +ClassificationRelatedAuthors.getText()+"','"
                    +ClassificationResearchGroup.getSelectedItem()+"','"
                    +ClassificationClassification.getSelectedItem()+"','"
                    +ClassificationPublicationDate.getSelectedItem()+"')";
                if (localSql.insert(Statment)){
                    
                   // COPY file to upload directory with MD5 as the name
                   FileChannel in = null, out = null;
                   in = new FileInputStream(fileArray[progress]).getChannel();
                   out = new FileOutputStream(uploadFileDest).getChannel();
                   in.transferTo( 0, in.size(), out);
                   out.close();
                   in.close();
                    
                   if (progress < fileArray.length-1) {
                        progress++;
                        ClassificationFilename.setText(fileArray2[progress]);
                        try {
                            ClassificationAuthor.setText(classificationArray[progress][0]);
                            ClassificationTitle.setText(classificationArray[progress][1]);
                            ClassificationKeywords.setText(classificationArray[progress][2]);
                            ClassificationPublicationDate.setSelectedItem(new Integer(classificationArray[progress][3]));
                        }catch(Exception e){}
                        ClassificationRelatedAuthors.setText("");
                        ClassificationResearchGroup.setSelectedIndex(0);
                        ClassificationClassification.setSelectedIndex(0);
                        progress++;
                        jLabel13.setText(new String(progress.toString()));
                        this.repaint();
                    } else {
                        System.out.println("Were Finished");
                        jTextField1.setText("");
                        jLabel3.setText("Success, next file?");
                        jPanel_upload.remove(classify);
                        fileArray = new String[0];
                        jLabel13.setText("1");
                    }
                }else {
                    throw new Exception("Insert failed for unknown reason");
                }
               this.repaint();
            }catch(Exception e){throw new popupException(e);};
//        }
    }//GEN-LAST:event_jButton5ActionPerformed
 
    private void imagePanel3AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_imagePanel3AncestorResized
        imagePanel3.setPreferredSize(new java.awt.Dimension((this.getWidth()-632)/2,72));
    }//GEN-LAST:event_imagePanel3AncestorResized

    private void imagePanel1AncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_imagePanel1AncestorResized
        imagePanel1.setPreferredSize(new java.awt.Dimension((this.getWidth()-632)/2,72));
    }//GEN-LAST:event_imagePanel1AncestorResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Admin;
    private javax.swing.JTextField ClassificationAuthor;
    private javax.swing.JTextField ClassificationAuthor1;
    private javax.swing.JComboBox ClassificationClassification;
    private javax.swing.JComboBox ClassificationClassification1;
    private javax.swing.JTextField ClassificationFilename;
    private javax.swing.JTextField ClassificationFilename1;
    private javax.swing.JTextField ClassificationKeywords;
    private javax.swing.JTextField ClassificationKeywords1;
    private javax.swing.JComboBox ClassificationPublicationDate;
    private javax.swing.JComboBox ClassificationPublicationDate1;
    private javax.swing.JTextField ClassificationRelatedAuthors;
    private javax.swing.JTextField ClassificationRelatedAuthors1;
    private javax.swing.JComboBox ClassificationResearchGroup;
    private javax.swing.JComboBox ClassificationResearchGroup1;
    private javax.swing.JTextField ClassificationTitle;
    private javax.swing.JTextField ClassificationTitle1;
    private javax.swing.JPanel LeftPadding;
    private javax.swing.JPanel Login;
    private javax.swing.JPanel LoginBox2;
    private javax.swing.JPanel LoginBox3;
    private javax.swing.JLabel Password2;
    private javax.swing.JLabel Password3;
    private javax.swing.JPasswordField PasswordComboBox2;
    private javax.swing.JPasswordField PasswordComboBox3;
    private javax.swing.JLabel Server2;
    private javax.swing.JLabel Server3;
    private javax.swing.JComboBox ServerCombobox2;
    private javax.swing.JComboBox ServerCombobox3;
    private javax.swing.JPanel Statistics;
    private javax.swing.JPanel TabbedPanePadder;
    private javax.swing.JLabel Title_middle;
    private javax.swing.JPanel TopPadding;
    private javax.swing.JPanel Upload;
    private javax.swing.JLabel Username2;
    private javax.swing.JLabel Username3;
    private javax.swing.JTextField UsernameCombobox2;
    private javax.swing.JTextField UsernameCombobox3;
    private javax.swing.JPanel View;
    private javax.swing.JTextField authorContains;
    private javax.swing.JTextField authorEnds;
    private javax.swing.JTextField authorStarts;
    private javax.swing.JComboBox classification;
    private javax.swing.JPanel classify;
    private javax.swing.JComboBox dateEnds;
    private javax.swing.JComboBox dateStarts;
    private javax.swing.JMenuItem delete;
    private javax.swing.JComboBox group;
    private javax.swing.JTextField groupEnds;
    private javax.swing.JTextField groupStarts;
    private digitallibrary.ImagePanel imagePanel1;
    private digitallibrary.ImagePanel imagePanel3;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton_upload_browse;
    private javax.swing.JButton jButton_upload_store;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel_Admin;
    private javax.swing.JPanel jPanel_PadBottom;
    private javax.swing.JPanel jPanel_PadBottom1;
    private javax.swing.JPanel jPanel_PadBottom2;
    private javax.swing.JPanel jPanel_PadBottom3;
    private javax.swing.JPanel jPanel_PadBottom4;
    private javax.swing.JPanel jPanel_PadEast;
    private javax.swing.JPanel jPanel_PadEast1;
    private javax.swing.JPanel jPanel_PadEast2;
    private javax.swing.JPanel jPanel_PadEast3;
    private javax.swing.JPanel jPanel_PadEast4;
    private javax.swing.JPanel jPanel_PadEast5;
    private javax.swing.JPanel jPanel_PadTop;
    private javax.swing.JPanel jPanel_PadTop1;
    private javax.swing.JPanel jPanel_PadTop1_pad;
    private javax.swing.JPanel jPanel_PadTop1_pad1;
    private javax.swing.JPanel jPanel_PadTop1_pad10;
    private javax.swing.JPanel jPanel_PadTop1_pad11;
    private javax.swing.JPanel jPanel_PadTop1_pad2;
    private javax.swing.JPanel jPanel_PadTop1_pad3;
    private javax.swing.JPanel jPanel_PadTop1_pad4;
    private javax.swing.JPanel jPanel_PadTop1_pad5;
    private javax.swing.JPanel jPanel_PadTop1_pad6;
    private javax.swing.JPanel jPanel_PadTop1_pad7;
    private javax.swing.JPanel jPanel_PadTop1_pad8;
    private javax.swing.JPanel jPanel_PadTop1_pad9;
    private javax.swing.JPanel jPanel_PadTop2;
    private javax.swing.JPanel jPanel_PadTop3;
    private javax.swing.JPanel jPanel_PadTop4;
    private javax.swing.JPanel jPanel_PadTop5;
    private javax.swing.JPanel jPanel_PadWest;
    private javax.swing.JPanel jPanel_PadWest1;
    private javax.swing.JPanel jPanel_PadWest2;
    private javax.swing.JPanel jPanel_PadWest3;
    private javax.swing.JPanel jPanel_PadWest4;
    private javax.swing.JPanel jPanel_PadWest5;
    private javax.swing.JPanel jPanel_upload;
    private javax.swing.JPanel jPanel_view;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JPasswordField jTextField4;
    private javax.swing.JTextField keywordsContains;
    private javax.swing.JTextField keywordsNot;
    private javax.swing.JMenuItem modify;
    private javax.swing.JMenuItem open;
    private javax.swing.JPanel reclassify;
    private javax.swing.JTextField relatedContains;
    private javax.swing.JTextField relatedEnds;
    private javax.swing.JTextField relatedStarts;
    private javax.swing.JPopupMenu rightClick;
    private javax.swing.JButton runSearch;
    private javax.swing.JPanel syncmiddle;
    private javax.swing.JTextField titleContains;
    private javax.swing.JTextField titleEnds;
    private javax.swing.JTextField titleStarts;
    // End of variables declaration//GEN-END:variables

}
